From 2a08e61245d685bfb578680459d6ace614fe6a3d Mon Sep 17 00:00:00 2001
From: Lindsey Gray <lindsey.gray@gmail.com>
Date: Fri, 20 Jun 2025 22:19:15 -0500
Subject: [PATCH] inject cmake project

---
 CMakeLists.txt  | 101 ++++++++++++++++++++++++++++++++++++++++++++++++
 Config.cmake.in |   3 ++
 2 files changed, 104 insertions(+)
 create mode 100644 CMakeLists.txt
 create mode 100644 Config.cmake.in

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..c15df47
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,101 @@
+# List of useful CMake arguments:
+#  CMAKE_INSTALL_PREFIX=...     path for the installation
+#                               (can be replaced be cmake --install . -- prefix <patth>)
+
+cmake_minimum_required(VERSION 3.10.0...4.0.1)
+include(CMakePrintHelpers)
+
+# set the project name
+project(getopt-win32 VERSION 0.1 LANGUAGES C)
+# set a pre-release version if relevant, e.g. "-beta1"
+set(PROJECT_VERSION_PRERELEASE "")
+include(GNUInstallDirs)
+
+#set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+
+#----------------------------------------------------------------------
+# version information
+set(GETOPT_VERSION "${PROJECT_VERSION}${PROJECT_VERSION_PRERELEASE}")
+
+# print out the project name and version
+cmake_print_variables(PROJECT_NAME GETOPT_VERSION)
+
+#----------------------------------------------------------------------
+# default build type
+#----------------------------------------------------------------------
+if(NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE Release)
+endif()
+message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
+
+#----------------------------------------------------------------------
+# basic C++ checks
+#----------------------------------------------------------------------
+
+# specify the C++ standard
+set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})
+
+add_library(getopt SHARED getopt.c)
+add_library(getopt::getopt ALIAS getopt)
+
+target_include_directories(getopt
+                           PUBLIC
+                            $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
+                            $<INSTALL_INTERFACE:include>
+                           )
+
+install(FILES getopt.h DESTINATION include)
+
+# here we specify that runtime library components (e.g. .dlls, but not .so or .dylib)
+# go into the binary directory (e.g. /bin, rather than the library directory e.g /lib)
+# this is typical organization on windows installs
+install(TARGETS
+          getopt
+        EXPORT
+          getoptTargets
+        RUNTIME
+          COMPONENT Runtime
+          DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY
+          COMPONENT Runtime
+          DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE
+          COMPONENT Development
+          DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        )
+
+
+# allow getopt to work with find_package
+export(EXPORT getoptTargets
+  NAMESPACE unofficial::getopt-win32
+  FILE "${CMAKE_CURRENT_BINARY_DIR}/getoptTargets.cmake"
+)
+
+install(EXPORT getoptTargets
+  NAMESPACE unofficial::getopt-win32
+  FILE getoptTargets.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/getopt
+)
+
+include(CMakePackageConfigHelpers)
+
+configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
+  "${CMAKE_CURRENT_BINARY_DIR}/getoptConfig.cmake"
+  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/getopt
+  NO_SET_AND_CHECK_MACRO
+  NO_CHECK_REQUIRED_COMPONENTS_MACRO
+  )
+
+write_basic_package_version_file(
+  "${CMAKE_CURRENT_BINARY_DIR}/getoptConfigVersion.cmake"
+  VERSION "${PROJECT_VERSION}"
+  COMPATIBILITY AnyNewerVersion
+  )
+
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/getoptConfig.cmake
+  ${CMAKE_CURRENT_BINARY_DIR}/getoptConfigVersion.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/getopt
+  )
diff --git a/Config.cmake.in b/Config.cmake.in
new file mode 100644
index 0000000..1e7406f
--- /dev/null
+++ b/Config.cmake.in
@@ -0,0 +1,3 @@
+@PACKAGE_INIT@
+
+include ( "${CMAKE_CURRENT_LIST_DIR}/getoptTargets.cmake" )
-- 
2.39.5 (Apple Git-154)
